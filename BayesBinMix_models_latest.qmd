---
title: "BayesBinMix Census Data (New models)"
author: "Carmen B. Rodriguez"
format: html
editor: visual
table-of-contents: true
tbl-cap-location: top
---

```{r}
#| warning: false
#| output: false
#Load packages
library(tidyverse)
library(ggplot2)
library(psych)
library(table1)
library(tableone)
library(Hmisc)
library(BayesBinMix)
library(coda)
library(DescTools)
library(MCMCvis)
library(knitr)
library(gmodels)
```

```{r}
#Load census data and results from latest model
censusdata_bin <- readRDS("./censusdata_bin_raceeth_033024.rds")
censusdata<- load("./censusdata_updated_newvars.RData")
agedist<-load("./census_age_dist.RData")
names(censusdata_bin) <- c("acs5_2010_bin","acs5_2015_bin","acs5_2019_bin")

#Output from heating vector tuning-- 4/14/24
res_all<-readRDS("./tuningheatsvec_4.14.24.rds")
#It seems that heating vector with deltaT = 0.01 worked well for all datasets-- swap acceptance rates ranged from 54-56.8%
#deltaT2: 22.2%, 25.7%, 22.7

res_acs10<-res_all[[1]][["res_acs10_deltatemp1"]]
res_acs15<-res_all[[1]][["res_acs15_deltatemp1"]]
res_acs19<-res_all[[1]][["res_acs19_deltatemp1"]]
```

```{r}
#|eval: false
#These results look much better!
print(res_acs10)
print(res_acs15)
print(res_acs19)
```

### **Plots** and Patterns for ACS 2006-2010

#### **Cluster mixing weights estimates**

```{r}
mapK<-Mode(res_acs10$K.mcmc)[1]  #tells you mapK
#Class probabilities
stats<-cbind(summary(res_acs10$parameters.ecr.mcmc)$statistics[,c(1,2)], 
             summary(res_acs10$parameters.ecr.mcmc)$quantiles[,c(1,5)])

tail(round(stats, 4), mapK) %>% kable()

check<-as.matrix(res_acs10$parameters.ecr.mcmc)
wts<-check[,163:171]
colMeans(wts)
apply(wts, 2, sd) 
apply(wts, 2, quantile, probs = c(0.025, 0.975))
```

```{r}
#Find index of highest probability
highest_index<-function(vec){
  s<-length(vec)
  vec1<-order(vec)
 return(vec1[s])
}

#Find second highest probability and index
second_highest<-function(vec){
  vec1<-sort(vec, decreasing = T)
 return(vec1[2])
}
second_highest_index<-function(vec){
  s<-length(vec)
  vec1<-order(vec)
 return(vec1[s-1])
}
```

#### Explore cluster assignment based on ECR algorithm + Distribution of census variables across clusters

```{r}
#For ACS 2010 and mapK = 9
mapK<-Mode(res_acs10$K.mcmc)[1]  #tells you mapK
classificationprobs_10<-res_acs10$classificationProbabilities.ecr
ClusterAssignment<-res_acs10$clusterMembershipPerMethod[,2]
# Add cluster classification based on maximum probability 
maxProb<-apply(classificationprobs_10, 1, max)
ClusterAssignment_ecr_temp<-apply(classificationprobs_10,1, highest_index)


classificationprobs_10$ClusterAssignment<-ClusterAssignment
classificationprobs_10$maxProb<-maxProb
classificationprobs_10$ClusterAssignment_ecr_temp<-ClusterAssignment_ecr_temp

#9 census tracts that are not classified based on highest prob
table(classificationprobs_10$ClusterAssignment,classificationprobs_10$ClusterAssignment_ecr_temp)

classificationprobs_10 %>% filter(ClusterAssignment_ecr_temp != ClusterAssignment)
##This is odd-- these algorithms assign observations to clusters probabilistically based on the highest posterior probabilities of cluster assignments given the observed data
##--> SOLVED: it seems like a rounding issue because it makes the correct assignment when none of the probabilities have similar/same leading number.

table(classificationprobs_10$ClusterAssignment)
table(classificationprobs_10$ClusterAssignment_ecr_temp)

classificationprobs_10$GEOID<-row.names(censusdata_bin$acs5_2010_bin)

#**Since the distribution is not much different, we can re-assign these 9 census tracts to the cluster they belong based on the highest probability-- all other classificiations match perfectly, and so we will keep variable ClusterAssignment_ecr_temp.
#Also make a note of these "fuzzy" census tracts- to see if same across survey waves
fuzzygeoids_10<-classificationprobs_10 %>% filter(ClusterAssignment_ecr_temp != ClusterAssignment) %>% select(GEOID)


#Prep Data
classificationprobs_10$ClusterAssignment_final<- factor(classificationprobs_10$ClusterAssignment_ecr_temp, levels = 1:9, labels = paste0("cluster", 1:9, sep= " "))

dat10_clusters<- classificationprobs_10 %>% select(GEOID,ClusterAssignment_final, maxProb)



###########################################################################################
#Distribution of other demographic census variables across clusters to help with profiles
###########################################################################################
#merge age dist + race dist with cluster information-- these are proportions
merged10<- merge(dat10_clusters, agedist10_wide, by = "GEOID")

table1::table1(~  age_median + age_20_24 + age_25_34 + age_35_44 + age_45_54 + age_55_59 + age_60_64 + age_65_74 + age_75_84 + age_85_more |ClusterAssignment_final, data= merged10, overall = F)

#Distrubution of original NSES variables (not binarized) by cluster
acs10<-acs5_2010_wide1 <- acs5_2010_wide  %>% select( !c( "Femalehousehold_2010_E","SNAP_2010_E","Two_or_more_rooms_2010_E", paste0("ms", 1:8), "ms10", "ms_to", paste0("wc", 1:14), "wc_to","pov_to", paste0("pov", 2:5), "white_collar_occupation_2010", "HouseIncBlowPovLineP_2010", "Lessthan2rooms_2010_E",  "Two_or_more_rooms_2010_P", "Total_occhousing_2010", "NH_some_other_race_2010", "NH_two_or_more_races_2010",  "NonHispanicWhite_2010" , "minoritystatus_2010"))
acs10$ClusterAssignment<-merged10$ClusterAssignment_final

acs10bin<-censusdata_bin$acs5_2010_bin
acs10bin$GEOID <- rownames(acs10bin)
acs10bin<- acs10bin %>% mutate_if(is.numeric, as.factor)
acs10bin$ClusterAssignment<-classificationprobs_10$ClusterAssignment_final
#acs15bin$ClusterAssignment<- factor(acs15bin$ClusterAssignment, levels = 1:9, labels = paste0("cluster", 1:9, sep= " "))


table1(~ Lackplumbing_2010 + medianincome_2010 + BachelorHigherP_2010  +  Education9years_2010 +  Femalehousehold_2010_P + HighSchoolHigherP_2010 + No_vehicle_2010 + OwnerOccupiedUnitP_2010 + RenterOccupiedUnitP_2010 + UnemployementP_2010 + working_class_2010 + SNAP_2010_P +  Hispanic_or_Latino_2010 + NonHispanicBlack_2010 + NonHispanicAsian_2010 + pov_2010 + Crowding_housing_2010 + lang_home_EN_notwell_2010|ClusterAssignment, data= acs10, overall = F)


```

#### Distribution of assignment probabilities to the most probable cluster

```{r}
boxplot10<- merged10 %>%  ggplot(aes(x = ClusterAssignment_final, y = maxProb, fill = ClusterAssignment_final)) +
  geom_boxplot() +
  labs(fill = "Cluster Assignment", 
       y = "Assignment Probability after ECR algorithm", 
       x= "")
boxplot10
dattable<- merged10 %>% rename(`Average Assignment Probability (ECR Algorithm)` = maxProb,
                    `Cluster Assignment` = ClusterAssignment_final) 

table1::table1(~`Average Assignment Probability (ECR Algorithm)` |`Cluster Assignment`, data= dattable, overall = F)

```

#### Generate bar plots

```{r}
#| layout-ncol: 1
#| fig-width: 10
#| fig-height: 10
#| fig-cap: 
#|   - "Individual Neighborhood SES variables"
#|   -  "Neighborhood  SES variables Domains"
#Import functions from plots.R
source("plots.R")
#source("/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/plots.R")
library(viridis)
#Need to be in order
#names(censusdata_bin$acs5_2010_bin)
sesvars<-c("Median income", "Female household", "< HS", " >= HS", " >= Bacherlors", "Limited EN Proficiency", "Unemployment", "SNAP benefits", "Owner-occupied", "Renter-occupied", 
           "No vehicle", "Hispanic or Latino", "NH Black", "NH Asian", "Crowded housing", "Below 150% poverty", "Working class", "Lack complete plumbing")


# Other color options
viridis_palette <- viridis(18)
custom_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", 
                   "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
                   "#ff0000", "#00ff00", "#0000ff", "#ffff00")

group_cols<-c("#1f77b4","#2ca02c","salmon1", "#bcbd22", "#e377c2")


# Generate 14 pastel colors for ungrouped graph
pastel_palette1 <- generate_pastel_colors(18)


#fig_title = paste("Success Probabilities when mapK=", mapK, sep="")
fig_title = ""

dat_10<-preparedat_fig(res_acs10,mapK,sesvars)

p_10_indiv<-plot_thetakj_indiv(prob_est_long = dat_10, mapK,color_palette = pastel_palette1, fig_title)

p_10_group<-plot_thetakj_group(prob_est_long = dat_10, mapK,color_palette = group_cols, fig_title)

p_10_heatmap<- plot_thetakj_heatmap(prob_est_long = dat_10, fig_title)
p_10_heatmap2<- plot_thetakj_heatmap_r(prob_est_long = dat_10, fig_title)

#p_10_group_flipped<-plot_thetakj_group_flipped(prob_est_long = dat_10, mapK,color_palette = group_cols, fig_title)


#p_10_indiv
p_10_group
p_10_heatmap
p_10_heatmap2

pdf("/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/Figures/barplot10_18vars.pdf", width = 10, height = 20)
p_10_group
dev.off()

png("/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/Figures/barplot10_18vars.png", width = 780, height = 900)
 p_10_group
dev.off()

```

### **Plots** and Patterns for ACS 2011-2015

#### **Cluster mixing weights estimates**

```{r}
mapK<-Mode(res_acs15$K.mcmc)[1]
#Class probabilities
stats<-cbind(summary(res_acs15$parameters.ecr.mcmc)$statistics[,c(1,2)], summary(res_acs15$parameters.ecr.mcmc)$quantiles[,c(1,5)])

tail(round(stats,4), mapK) %>% kable()
#check clusters 6, 7 and 9
```

#### Age and Race/Ethnicity Distribution of the census tracts by cluster assignment

```{r}
#For ACS 2015 and mapK = 9
classificationprobs_15<-res_acs15$classificationProbabilities.ecr
# Add cluster classification based on maximum probability 
maxProb<-apply(classificationprobs_15, 1, max)
ClusterAssignment_ecr_temp<-apply(classificationprobs_15,1, highest_index)
table(ClusterAssignment_ecr_temp)

classificationprobs_15$ClusterAssignment<-res_acs15$clusterMembershipPerMethod[,2]
classificationprobs_15$ClusterAssignment_ecr_temp<-ClusterAssignment_ecr_temp
classificationprobs_15$maxProb<-maxProb


#Prep Data 
table(classificationprobs_15$ClusterAssignment_ecr_temp, classificationprobs_15$ClusterAssignment)

classificationprobs_15%>% filter(ClusterAssignment != ClusterAssignment_ecr_temp) 
#only 6 CTs

classificationprobs_15$GEOID<-row.names(censusdata_bin$acs5_2015_bin)
#only 6 CTs
fuzzygeoids_15<-classificationprobs_15%>% filter(ClusterAssignment_ecr_temp != ClusterAssignment) %>% select(GEOID)


#Same as above we using clusterassignment_ecr_temp
classificationprobs_15$ClusterAssignment_final<- factor(classificationprobs_15$ClusterAssignment_ecr_temp, levels = 1:9, labels = paste0("cluster", 1:9, sep= " "))


dat15_clusters<- classificationprobs_15 %>% select(GEOID,ClusterAssignment_final, maxProb)
table(dat15_clusters$ClusterAssignment_final)


###########################################################################################
#Distribution of other demographic census variables across clusters to help with profiles
###########################################################################################
merged15<- merge(dat15_clusters, agedist15_wide, by = "GEOID")
table1::table1(~  age_median + age_20_24 + age_25_34 + age_35_44 + age_45_54 + age_55_59 + age_60_64 + age_65_74 + age_75_84 + age_85_more |ClusterAssignment_final, data= merged15, overall = F)

acs15<- acs5_2015_wide  %>% select( !c( "Femalehousehold_2015_E","SNAP_2015_E","Two_or_more_rooms_2015_E", paste0("ms", 1:8), "ms10", "ms_to", paste0("wc", 1:14), "wc_to",
"pov_to", paste0("pov", 2:5), "white_collar_occupation_2015", "HouseIncBlowPovLineP_2015", "Lessthan2rooms_2015_E", "Two_or_more_rooms_2015_P", "Total_occhousing_2015",     "NH_some_other_race_2015","NH_two_or_more_races_2015",  "NonHispanicWhite_2015" ,  "minoritystatus_2015"))
acs15$ClusterAssignment<-merged15$ClusterAssignment_final

#Distrubution of SES variables by cluster
acs15bin<-censusdata_bin$acs5_2015_bin
acs15bin$GEOID <- rownames(acs15bin)
acs15bin<- acs15bin %>% mutate_if(is.numeric, as.factor)
acs15bin$ClusterAssignment<-classificationprobs_15$ClusterAssignment_final

table1(~ Lackplumbing_2015 + medianincome_2015 + BachelorHigherP_2015  +  Education9years_2015 +  Femalehousehold_2015_P + HighSchoolHigherP_2015 + No_vehicle_2015 + OwnerOccupiedUnitP_2015 + RenterOccupiedUnitP_2015 + UnemployementP_2015 + working_class_2015 + SNAP_2015_P +  Hispanic_or_Latino_2015 + NonHispanicBlack_2015 + NonHispanicAsian_2015 + pov_2015 + Crowding_housing_2015 + lang_home_EN_notwell_2015|ClusterAssignment, data= acs15, overall = F)

```

#### Distribution of assignment probabilities to the most probable cluster

```{r}
boxplot15<-merged15 %>% ggplot(aes(x = ClusterAssignment_final, y = maxProb, 
                                   fill = ClusterAssignment_final)) +
  geom_boxplot() +
  labs(fill = "Cluster Assignment",
       y = "Assignment Probability after ECR algorithm",
       x= "")

dattable15<-merged15 %>% rename(`Average Assignment Probability (ECR Algorithm)` = maxProb,
                    `Cluster Assignment` = ClusterAssignment_final) 

table1::table1(~`Average Assignment Probability (ECR Algorithm)` |`Cluster Assignment`, 
               data= dattable15, overall = F)

```

#### Generate bar plots

```{r}
#| layout-ncol: 1
#| fig-width: 10
#| fig-height: 10
#| fig-cap: 
#|   - "Individual Neighborhood SES variables"
#|   -  "Neighborhood  SES variables Domains"
mapK<-Mode(res_acs15$K.mcmc)[1]  #tells you mapK

fig_title = ""

dat_15<-preparedat_fig(res_acs15,mapK,sesvars)
p_15_indiv<-plot_thetakj_indiv(prob_est_long = dat_15, mapK,color_palette = pastel_palette1, fig_title)
p_15_group<-plot_thetakj_group(prob_est_long = dat_15, mapK,color_palette = group_cols, fig_title)
p_15_heatmap<- plot_thetakj_heatmap(prob_est_long = dat_15, fig_title)
p_15_heatmap1<- plot_thetakj_heatmap_r(prob_est_long = dat_15, fig_title)
#Remove cluter 7 from the plot-->
p_15_group
p_15_heatmap
p_15_heatmap1

pdf("/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/Figures/barplot15_18vars.pdf", width = 10, height = 20)
p_15_group
dev.off()


png("/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/Figures/barplot15_18vars.png", width = 780, height = 900)
p_15_group
dev.off()

```

### **Plots** and Patterns for ACS 2015-2019

#### **Cluster mixing weights estimates**

```{r}
mapK<-Mode(res_acs19$K.mcmc)[1]
#Class probabilities
stats<-cbind(summary(res_acs19$parameters.ecr.mcmc)$statistics[,c(1,2)], summary(res_acs19$parameters.ecr.mcmc)$quantiles[,c(1,5)])

tail(stats, mapK) %>% kable()
```

#### Age and Race/Ethnicity Distribution of the census tracts by cluster assignment

```{r}
#For ACS 2019 and mapK = 8
classificationprobs_19<-res_acs19$classificationProbabilities.ecr
# Add cluster classification based on maximum and 2nd highest probability 
maxProb<-apply(classificationprobs_19, 1, max)
ClusterAssignment_ecr_temp<-apply(classificationprobs_19,1, highest_index)

classificationprobs_19$maxProb<-maxProb
classificationprobs_19$ClusterAssignment<-res_acs19$clusterMembershipPerMethod[,2]
classificationprobs_19$ClusterAssignment_ecr_temp<-ClusterAssignment_ecr_temp


table(classificationprobs_19$ClusterAssignment_ecr_temp, classificationprobs_19$ClusterAssignment)

#7 cts HT1, 15 HT2
classificationprobs_19%>% filter(ClusterAssignment_ecr_temp != ClusterAssignment) 

classificationprobs_19$GEOID<-row.names(censusdata_bin$acs5_2019_bin)
fuzzygeoids_19<-classificationprobs_19%>% filter(ClusterAssignment_ecr_temp != ClusterAssignment) %>% select(GEOID)

classificationprobs_19$ClusterAssignment_final<- 
  factor(classificationprobs_19$ClusterAssignment_ecr_temp, levels = 1:7, labels = paste0("cluster", 1:7, sep= " "))


dat19_clusters<- classificationprobs_19 %>% select(GEOID,ClusterAssignment_final, maxProb)


#merge age dist + race dist with cluster information-- these are proportions
merged19<- merge(dat19_clusters, agedist19_wide, by = "GEOID")

table1::table1(~  age_median + age_20_24 + age_25_34 + age_35_44 + age_45_54 + age_55_59 + age_60_64 + age_65_74 + age_75_84 + age_85_more|ClusterAssignment_final, data= merged19, overall = F)

acs19 <- acs5_2019_wide  %>% select( !c( "Femalehousehold_2019_E","SNAP_2019_E","Two_or_more_rooms_2019_E",  paste0("ms", 1:8), "ms10", "ms_to", paste0("wc", 1:14), "wc_to",
 "pov_to", paste0("pov", 2:5), "white_collar_occupation_2019", "HouseIncBlowPovLineP_2019", "Lessthan2rooms_2019_E", "Two_or_more_rooms_2019_P", "Total_housing_2019",    "NH_some_other_race_2019", "NH_two_or_more_races_2019",  "NonHispanicWhite_2019" ,  "minoritystatus_2019" ))
acs19$ClusterAssignment<-merged19$ClusterAssignment_final


#Distrubution of SES variables by cluster
acs19bin<-censusdata_bin$acs5_2019_bin
acs19bin$GEOID <- rownames(acs19bin)
acs19bin<- acs19bin %>% mutate_if(is.numeric, as.factor)
acs19bin$ClusterAssignment<-merged19$ClusterAssignment


table1(~ Lackplumbing_2019 + medianincome_2019 + BachelorHigherP_2019  +  Education9years_2019 +  Femalehousehold_2019_P + HighSchoolHigherP_2019 + No_vehicle_2019 + OwnerOccupiedUnitP_2019 + RenterOccupiedUnitP_2019 + UnemployementP_2019 + working_class_2019 + SNAP_2019_P +  Hispanic_or_Latino_2019 + NonHispanicBlack_2019 + NonHispanicAsian_2019 + pov_2019 + Crowding_housing_2019 + lang_home_EN_notwell_2019 |ClusterAssignment, data= acs19, overall = F)



```

#### Distribution of assignment probabilities to the most probable cluster

```{r}
boxplot19<-merged19%>%  ggplot(aes(x = ClusterAssignment_final, y = maxProb, fill = ClusterAssignment_final)) +
  geom_boxplot() +
  labs(fill = "Cluster Assignment", 
       y = "Assignment Probability after ECR algorithm", 
       x= "")

dattable19<-merged19 %>% rename(`Average Assignment Probability (ECR Algorithm)` = maxProb,
                    `Cluster Assignment` = ClusterAssignment_final) 

table1::table1(~`Average Assignment Probability (ECR Algorithm)` |`Cluster Assignment`, 
               data= dattable19, overall = F)

```

#### Generate bar plots

```{r}
#| layout-ncol: 1
#| fig-width: 10
#| fig-height: 10
#| fig-cap: 
#|   - "Individual Neighborhood SES variables"
#|   -  "Neighborhood  SES variables Domains"
mapK<-Mode(res_acs19$K.mcmc)[1]  #tells you mapK

fig_title = ""

dat_19<-preparedat_fig(res_acs19,mapK,sesvars)
p_19_indiv<-plot_thetakj_indiv(prob_est_long = dat_19, mapK,color_palette = pastel_palette1, fig_title)
p_19_group<-plot_thetakj_group(prob_est_long = dat_19, mapK,color_palette = group_cols, fig_title)
p_19_heatmap<-plot_thetakj_heatmap(prob_est_long = dat_19, fig_title)
p_19_heatmap1<-plot_thetakj_heatmap_r(prob_est_long = dat_19, fig_title)
#p_19_indiv
p_19_group
p_19_heatmap
p_19_heatmap1

pdf("/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/Figures/barplot19_18vars.pdf", width = 10, height = 20)
p_19_group
dev.off()


png("/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/Figures/barplot19_18vars.png", width = 780, height = 900)
p_19_group
dev.off()

```

#### CROSS-TABS

```{r}
#We will use 2006-2010 survey as the reference, that is we will compare to this survey
table(acs10 = merged10$ClusterAssignment_final, acs15 = merged15$ClusterAssignment_final)

#Relabel clusters in acs15 based on qualitative descriptions
merged15$clustersnum<- as.numeric(merged15$ClusterAssignment_new)
merged15<-merged15 %>% mutate(ClusterAssignment = case_when(
  clustersnum == 1 ~ 7,
  clustersnum == 2 ~ 4,
  clustersnum == 3 ~ 2,
  clustersnum == 4 ~ 5,
  clustersnum == 5 ~ 6,
  clustersnum == 6 ~ 1,
  clustersnum == 7 ~ 8,
  clustersnum == 8 ~ 3,
))

table(merged15$clustersnum, merged15$ClusterAssignment)
merged15$ClusterAssignment<- 
  factor(merged15$ClusterAssignment, levels = 1:8, labels = paste0("cluster", 1:8, sep= " "))

table(acs10 = merged10$ClusterAssignment, acs15 = merged15$ClusterAssignment)


#Similarly for 2015-2019 we use 2011-2015 as refence
table(acs15 = merged15$ClusterAssignment, acs19 = merged19$ClusterAssignment_new)
merged19$clustersnum<- as.numeric(merged19$ClusterAssignment_new)
merged19<-merged19 %>% mutate(ClusterAssignment = case_when(
  clustersnum == 1 ~ 2,
  clustersnum == 2 ~ 3,
  clustersnum == 3 ~ 6,
  clustersnum == 4 ~ 5,
  clustersnum == 5 ~ 8,
  clustersnum == 6 ~ 1,
))

table(merged19$clustersnum, merged19$ClusterAssignment)

merged19$ClusterAssignment<- 
  factor(merged19$ClusterAssignment, levels = c(1,2,3,5,6,8), labels = paste0("cluster", c(1,2,3,5,6,8), sep= " "))

table(merged15$ClusterAssignment,merged19$ClusterAssignment)

```

### MAPS

```{r}
library(tidycensus)
library(sf)
library(tmap)
library(RColorBrewer)
library(cartogram)
library(geodaData)
#https://geodacenter.github.io/workbook/3a_mapping/lab3a.html#mapping-categorical-variables
#https://spatialanalysis.github.io/handsonspatialdata/basic-mapping.html#introduction-4
#https://stackoverflow.com/questions/73990261/unable-to-plot-the-census-tracts-using-tmap
#https://ggplot2.tidyverse.org/reference/ggsf.html
#https://r-spatial.org/r/2017/03/19/invalid.html#empty-geometries



#Brew colors
colorswant<-RColorBrewer::brewer.pal(9, "Set1")

options(tigris_use_cache = TRUE)
temp<-get_acs(state = "MA", geography = "tract", 
                   variables = "B03002_001", year = 2010, geometry = TRUE, cache_table = TRUE)

temp1<- temp %>% select(GEOID, NAME, geometry, estimate)
dat10map<-merged10 %>% select(GEOID,NAME.x, ClusterAssignment, maxProb) %>% rename(NAME = NAME.x)

#join datasets
map10<- merge(temp1, dat10map, by = "GEOID")
map10<-map10 %>%  select(GEOID, NAME.x, ClusterAssignment, maxProb, geometry) %>% rename(NAME = NAME.x)

# tm_shape(st_make_valid(map10)) + 
#   tm_polygons(col = "maxProb",style = "quantile",
#           n = 9, palette= "Set1",
#           title = "2006-2010 MA Census") + 
#   tm_layout(title = "",
#             frame = FALSE,
#             legend.outside = TRUE)

map10<- map10 %>% mutate(`Probabilistic Cluster Assingment` = as.numeric(ClusterAssignment))
map10$`Probabilistic Cluster Assingment`<-as.factor(map10$`Probabilistic Cluster Assingment`)

map10_clust<-tm_shape(st_make_valid(map10)) +
  tm_fill("Probabilistic Cluster Assingment",style="cat",palette=colorswant,)  +
  tm_borders() +
  tm_layout(title = "2006-2010 ACS Census Tracts", title.position = c("left","top"), scale = 1.2)

```

```{r}
temp<-get_acs(state = "MA", geography = "tract", 
                   variables = "DP05_0065", year = 2015, geometry = TRUE, cache_table = TRUE)

temp1<- temp %>% select(GEOID, NAME, geometry, estimate)
dat15map<-merged15 %>% select(GEOID,NAME, ClusterAssignment, probassign) 

#join datasets
map15<- merge(temp1, dat15map, by = "GEOID")
map15<-map15 %>%  select(GEOID, NAME.x, ClusterAssignment, probassign, geometry) %>% rename(NAME = NAME.x)

# tm_shape(st_make_valid(map15)) + 
#   tm_polygons(col = "probassign",style = "quantile",
#           n = 9, palette= "Set1",
#           title = "2011-2015 MA Census") + 
#   tm_layout(title = "",
#             frame = FALSE,
#             legend.outside = TRUE)

map15<- map15 %>% mutate(`Probabilistic Cluster Assingment` = as.numeric(ClusterAssignment))
map15$`Probabilistic Cluster Assingment`<-as.factor(map15$`Probabilistic Cluster Assingment`)


map15_clust<-tm_shape(st_make_valid(map15)) +
  tm_fill("Probabilistic Cluster Assingment",style="cat",palette=colorswant,)  +
  tm_borders() +
  tm_layout(title = "2011-2015 ACS Census Tracts", title.position = c("left","top"), scale = 1.2)
```

```{r}
temp<-get_acs(state = "MA", geography = "tract", 
                   variables = "B03002_001", year = 2019, geometry = TRUE, cache_table = TRUE)

temp1<- temp %>% select(GEOID, NAME, geometry, estimate)
dat19map<-merged19 %>% select(GEOID,NAME, ClusterAssignment, probassign) 

#join datasets
map19<- merge(temp1, dat19map, by = "GEOID")
map19<-map19 %>%  select(GEOID, NAME.x, ClusterAssignment, probassign, geometry) %>% rename(NAME = NAME.x)

# tm_shape(st_make_valid(map19)) + 
#   tm_polygons(col = "probassign",style = "quantile",
#           n = 7, palette= "Set1",
#           title = "2015-2019 MA Census") + 
#   tm_layout(title = "",
#             frame = FALSE,
#             legend.outside = TRUE)

map19<- map19 %>% mutate(`Probabilistic Cluster Assingment` = ClusterAssignment)
map19$`Probabilistic Cluster Assingment`<-as.factor(map19$`Probabilistic Cluster Assingment`)

#colors to match other maps
colmatch<-c("#E41A1C", "#377EB8","#4DAF4A","#FF7F00", "#FFFF33","#F781BF")
map19_clust<-tm_shape(st_make_valid(map19)) +
  tm_fill("Probabilistic Cluster Assingment",style="cat",palette=colmatch,)  +
  tm_borders() +
  tm_layout(title = "2015-2019 ACS Census Tracts", title.position = c("left","top"), scale = 1.2)

```

```{r}
#3 datasets with cluster assingment, prob of assingment
map10_1<- as.data.frame(map10)
dat10<-map10_1 %>% select(GEOID, NAME, ClusterAssignment, maxProb)
dat10$cluster_color<-as.numeric(dat10$ClusterAssignment)
dat10$cluster_color<- factor(dat10$cluster_color,levels = 1:9, labels= c("red", "blue",
 "green","purple","orange","yellow", "brown","pink","grey"))

table(dat10$cluster_color)
table(dat10$ClusterAssignment)



dat15<-as.data.frame(map15) %>% select(GEOID, NAME, ClusterAssignment, probassign)
dat15$cluster_color<-as.numeric(dat15$ClusterAssignment)
dat15$cluster_color<- factor(dat15$cluster_color,levels = 1:8, labels= c("red", "blue",
 "green","purple","orange","yellow", "brown","pink"))

table(dat15$cluster_color)
table(dat15$ClusterAssignment)


dat19<-as.data.frame(map19) %>% select(GEOID, NAME, ClusterAssignment, probassign)
dat19$cluster_color<-as.numeric(dat19$ClusterAssignment)
dat19$cluster_color<- factor(dat19$cluster_color,levels = c(1,2,3,5,6,8), labels= c("red", "blue","green","orange","yellow", "pink"))

table(dat19$cluster_color)
table(dat19$ClusterAssignment)

```

### Export

```{r}
#save data
save(dat10, dat15, dat19, file = "/Users/carmenrodriguez/Desktop/Research Projects/BayesBinMix/ecbayesbinmix/bayesbinmix_clustered_tracts.RData")


#Export 2010 only
dat10_export<- merged10 %>% select("GEOID","ClusterAssignment_final")

```
