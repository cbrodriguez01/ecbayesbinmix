---
title: "BayesBinMix Census Data (New models)"
author: "Carmen B. Rodriguez"
format: html
editor: visual
table-of-contents: true
tbl-cap-location: top
---

```{r}
#| warning: false
#| output: false
#Load packages
library(tidyverse)
library(Hmisc)
library(reshape2)
library(ggplot2)
library(psych)
library(table1)
library(tableone)
library(Hmisc)
library(BayesBinMix)
library(foreach)
library(label.switching)
library(doParallel)
library(coda)
library(DescTools)
library(MCMCvis)
library(knitr)
library(forcats)
library(gmodels)
```

The Multivariate Bernoulli Mixture Model

The dimensionality of the multivariate distribution is equal to $d = 14$.

The following prior assumptions are imposed

$$K \sim \text{Truncated Poisson}(\lambda = 1)$$

$$p|K \sim \text{Dirichlet}(\gamma_1,..., \gamma_K)$$ We set $\gamma_1=...= \gamma_K =\gamma = 1/50$. We do this so that the prior distribution on the weight distribution of a mixture with $$K$$ components is chosen in such a way that a priori the number of clusters in the data is random and is allowed to be smaller than $$K$$ with high probability.<https://link.springer.com/article/10.1007/s11634-018-0329-y>

$$\theta_{kj} \sim \text{Beta}(\alpha=1, \beta=1)$$

```{r}
#Load census data and results from latest model
censusdata_bin <- readRDS("./censusdata_bin_rownames.rds")
names(censusdata_bin) <- c("acs5_2010_bin","acs5_2015_bin","acs5_2019_bin")

res_all <- readRDS("./ACSall_results_withburnin_2.29.rds")
res_acs10<-res_all$res_acs10_10
res_acs15<-res_all$res_acs15_15
res_acs19<-res_all$res_acs19_19
```

```{r}
#| eval = false
print(res_acs10)
print(res_acs15)
print(res_acs19)
```

| ACS Survey Year |    $$   
                    K_{max} 
                      $$    |   7   |   8   |     9     |  10   |
|-----------------|:-------:|:-----:|:-----:|:---------:|:-----:|
| 2006-2010       |   10    |   0   | 0.112 | **0.476** | 0.412 |
| 2011-2015       |   10    | 0.042 | 0.404 | **0.424** | 0.130 |
| 2015-2019       |   10    | 0.032 | 0.258 |   0.420   | 0.290 |

: **Table 1.** Estimated posterior distribution of the number of clusters for each survey wave.

### **Plots** and Patterns for ACS 2006-2010

```{r}
#Import functions from plots.R
source("plots.R")
library(viridis)
sesvars<-c("Two People Per Room","Lack of complete Plumbing", "Median Household Income", ">= Bacherlor's Degree", "Below Poverty Line", "< High School",
           "Female Household", ">= High School","No Vehicle","Owner", "Renter", "Unemployment","White Collar Occupation", "SNAP Benefits")


# Other color options
viridis_palette <- viridis(14)
custom_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", 
                   "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
                   "#ff0000", "#00ff00", "#0000ff", "#ffff00")

group_cols<-c("#1f77b4","#2ca02c","salmon1", "#bcbd22")


# Generate 14 pastel colors for ungrouped graph
pastel_palette1 <- generate_pastel_colors(14)
```

```{r}
#| layout-ncol: 1
#| fig-width: 10
#| fig-height: 10
#| fig-cap: 
#|   - "Individual Neighborhood SES variables"
#|   -  "Neighborhood  SES variables Domains"
#Kmax = 10
mapK<-Mode(res_acs10$K.mcmc)[1]  #tells you mapK

fig_title = paste("Success Probabilities when mapK=", mapK, sep="")

dat_10<-preparedat_fig(res_acs10,mapK,sesvars)

p_10_indiv<-plot_thetakj_indiv(prob_est_long = dat_10, mapK,color_palette = pastel_palette1, fig_title)

p_10_group<-plot_thetakj_group(prob_est_long = dat_10, mapK,color_palette = group_cols, fig_title)

#p_10_group_flipped<-plot_thetakj_group_flipped(prob_est_long = dat_10, mapK,color_palette = group_cols, fig_title)


p_10_indiv
p_10_group

#to describe patterns
#dat_10 %>% group_by(cluster) %>% arrange(theta_kj,.by_group = T)
```

#### **Cluster mixing weights estimates**

```{r}
#Class probabilities
stats<-cbind(summary(res_acs10$parameters.ecr.mcmc)$statistics[,c(1,2)], summary(res_acs10$parameters.ecr.mcmc)$quantiles[,c(1,5)])

tail(stats, mapK) %>% kable()
```

#### Age Distribution of the census tracts

```{r}
#For ACS 2010 and mapK = 9
mapK<-Mode(res_acs10$K.mcmc)[1]  #tells you mapK
classificationprobs_10<-res_acs10$classificationProbabilities.ecr
# Add cluster classification based on maximum probability 
maxProb<-apply(classificationprobs_10, 1, max)
ClusterAssignment<-res_acs10$clusterMembershipPerMethod[,2]

classificationprobs_10$ClusterAssignment<-ClusterAssignment
classificationprobs_10$maxProb<-maxProb

#Prep Data
classificationprobs_10$GEOID<-row.names(censusdata_bin$acs5_2010_bin)


classificationprobs_10$ClusterAssignment<- factor(classificationprobs_10$ClusterAssignment, levels = 1:9, labels = paste0("cluster", 1:9, sep= " "))

dat10_clusters<- classificationprobs_10 %>% select(GEOID,ClusterAssignment, maxProb)

agedist<-load("./census_age_dist.RData")

#merge age dist with cluster informaiton-- these are proportions
merged10<- merge(dat10_clusters, agedist10_wide, by= "GEOID")
table1::table1(~ age_20_24 + age_25_34 + age_35_44 + age_45_54 + age_55_59 + age_60_64 + age_65_74 + age_75_84 + age_85_more + age_median |ClusterAssignment, data= merged10, overall = F)
#We might be able to merge
```

#### Distribution of assignment probabilities to the most probable cluster

```{r}

merged10 %>%  ggplot(aes(x = ClusterAssignment, y = maxProb, fill = ClusterAssignment)) +
  geom_boxplot() +
  labs(fill = "Cluster Assignment", 
       y = "Assignment Probability after ECR algorithm", 
       x= "")

dattable<- merged10 %>% rename(`Average Assignment Probability (ECR Algorithm)` = maxProb,
                    `Cluster Assignment` = ClusterAssignment) 

table1::table1(~`Average Assignment Probability (ECR Algorithm)` |`Cluster Assignment`, data= dattable, overall = F)


```

### **Plots** and Patterns for ACS 2011-2015

```{r}
#| layout-ncol: 1
#| fig-width: 10
#| fig-height: 10
#| fig-cap: 
#|   - "Individual Neighborhood SES variables"
#|   -  "Neighborhood  SES variables Domains"
mapK<-Mode(res_acs15$K.mcmc)[1]  #tells you mapK

fig_title = paste("Success Probabilities when mapK=", mapK, sep="")

dat_15<-preparedat_fig(res_acs15_10,mapK,sesvars)
p_15_indiv<-plot_thetakj_indiv(prob_est_long = dat_15, mapK,color_palette = pastel_palette1, fig_title)
p_15_group<-plot_thetakj_group(prob_est_long = dat_15, mapK,color_palette = group_cols, fig_title)

p_15_indiv
p_15_group

#to describe patterns
#dat_15 %>% group_by(cluster) %>% arrange(theta_kj,.by_group = T)


```

#### **Cluster mixing weights estimates**

```{r}
#Class probabilities
stats<-cbind(summary(res_acs15_10$parameters.ecr.mcmc)$statistics[,c(1,2)], summary(res_acs15_10$parameters.ecr.mcmc)$quantiles[,c(1,5)])

tail(stats, mapK) %>% kable()
```

#### Age Distribution of the census tracts

```{r}
#For ACS 2015 and mapK = 4
classificationprobs_15<-res_acs15_10$classificationProbabilities.ecr
# Add cluster classification based on maximum probability 
maxProb<-apply(classificationprobs_15, 1, max)
ClusterAssignment<-res_acs15_10$clusterMembershipPerMethod[,2]

classificationprobs_15$ClusterAssignment<-ClusterAssignment
classificationprobs_15$maxProb<-maxProb

#Prep Data 
classificationprobs_15$GEOID<-row.names(censusdata_bin$acs5_2015_bin)

classificationprobs_15$ClusterAssignment<- factor(classificationprobs_15$ClusterAssignment, levels = 1:4, labels = c("cluster 1", "cluster 2", "cluster 3", "cluster 4"))


dat15_clusters<- classificationprobs_15 %>% select(GEOID,ClusterAssignment, maxProb)

#merge age dist with cluster informaiton-- these are proportions
merged15<- merge(dat15_clusters, agedist15_wide, by= "GEOID")
# merged15<-merged15 %>% mutate(cluster_new = case_when(
#         ClusterAssignment == "cluster 1" ~ 2,
#         ClusterAssignment == "cluster 2" ~ 1,
#         ClusterAssignment == "cluster 3" ~ 4,
#         ClusterAssignment == "cluster 4" ~ 3,))
# #table(merged15$ClusterAssignment, merged15$cluster_new)
# merged15$cluster_new<-factor(merged15$cluster_new, levels = 1:4, 
#                              labels = c("cluster 1", "cluster 2", "cluster 3", "cluster 4"))


table1::table1(~ age_20_24 + age_25_34 + age_35_44 + age_45_54 + age_55_59 + age_60_64 + age_65_74 + age_75_84 + age_85_more + age_median |ClusterAssignment, 
               data= merged15, overall = F)
```

#### Distribution of assignment probabilities to the most probable cluster

```{r}
merged15%>%  ggplot(aes(x = ClusterAssignment, y = maxProb, fill = ClusterAssignment)) +
  geom_boxplot() +
  labs(fill = "Cluster Assignment", 
       y = "Assignment Probability after ECR algorithm", 
       x= "")

dattable15<-merged15 %>% rename(`Average Assignment Probability (ECR Algorithm)` = maxProb,
                    `Cluster Assignment` = ClusterAssignment) 

table1::table1(~`Average Assignment Probability (ECR Algorithm)` |`Cluster Assignment`, 
               data= dattable15, overall = F)

```

### **Plots** and Patterns for ACS 2015-2019

```{r}
#| layout-ncol: 1
#| fig-width: 10
#| fig-height: 10
#| fig-cap: 
#|   - "Individual Neighborhood SES variables"
#|   -  "Neighborhood  SES variables Domains"
mapK<-Mode(res_acs19$K.mcmc)[1]  #tells you mapK

fig_title = paste("Success Probabilities when mapK=", mapK, sep="")

dat_15<-preparedat_fig(res_acs15_10,mapK,sesvars)
p_15_indiv<-plot_thetakj_indiv(prob_est_long = dat_15, mapK,color_palette = pastel_palette1, fig_title)
p_15_group<-plot_thetakj_group(prob_est_long = dat_15, mapK,color_palette = group_cols, fig_title)

p_15_indiv
p_15_group

#to describe patterns
#dat_15 %>% group_by(cluster) %>% arrange(theta_kj,.by_group = T)


```

#### **Cluster mixing weights estimates**

```{r}
#Class probabilities
stats<-cbind(summary(res_acs15_10$parameters.ecr.mcmc)$statistics[,c(1,2)], summary(res_acs15_10$parameters.ecr.mcmc)$quantiles[,c(1,5)])

tail(stats, mapK) %>% kable()
```

#### Age Distribution of the census tracts

```{r}
#For ACS 2015 and mapK = 4
classificationprobs_15<-res_acs15_10$classificationProbabilities.ecr
# Add cluster classification based on maximum probability 
maxProb<-apply(classificationprobs_15, 1, max)
ClusterAssignment<-res_acs15_10$clusterMembershipPerMethod[,2]

classificationprobs_15$ClusterAssignment<-ClusterAssignment
classificationprobs_15$maxProb<-maxProb

#Prep Data 
classificationprobs_15$GEOID<-row.names(censusdata_bin$acs5_2015_bin)

classificationprobs_15$ClusterAssignment<- factor(classificationprobs_15$ClusterAssignment, levels = 1:4, labels = c("cluster 1", "cluster 2", "cluster 3", "cluster 4"))


dat15_clusters<- classificationprobs_15 %>% select(GEOID,ClusterAssignment, maxProb)

#merge age dist with cluster informaiton-- these are proportions
merged15<- merge(dat15_clusters, agedist15_wide, by= "GEOID")
# merged15<-merged15 %>% mutate(cluster_new = case_when(
#         ClusterAssignment == "cluster 1" ~ 2,
#         ClusterAssignment == "cluster 2" ~ 1,
#         ClusterAssignment == "cluster 3" ~ 4,
#         ClusterAssignment == "cluster 4" ~ 3,))
# #table(merged15$ClusterAssignment, merged15$cluster_new)
# merged15$cluster_new<-factor(merged15$cluster_new, levels = 1:4, 
#                              labels = c("cluster 1", "cluster 2", "cluster 3", "cluster 4"))


table1::table1(~ age_20_24 + age_25_34 + age_35_44 + age_45_54 + age_55_59 + age_60_64 + age_65_74 + age_75_84 + age_85_more + age_median |ClusterAssignment, 
               data= merged15, overall = F)
```

#### Distribution of assignment probabilities to the most probable cluster

```{r}
merged15%>%  ggplot(aes(x = ClusterAssignment, y = maxProb, fill = ClusterAssignment)) +
  geom_boxplot() +
  labs(fill = "Cluster Assignment", 
       y = "Assignment Probability after ECR algorithm", 
       x= "")

dattable15<-merged15 %>% rename(`Average Assignment Probability (ECR Algorithm)` = maxProb,
                    `Cluster Assignment` = ClusterAssignment) 

table1::table1(~`Average Assignment Probability (ECR Algorithm)` |`Cluster Assignment`, 
               data= dattable15, overall = F)

```
